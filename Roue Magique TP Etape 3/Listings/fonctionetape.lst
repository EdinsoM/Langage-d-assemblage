


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ********************
    2 00000000                 THUMB
    3 00000000                 REQUIRE8
    4 00000000                 PRESERVE8
    5 00000000         
    6 00000000         ;*******************************************************
                       *******************
    7 00000000         ;  Fichier Vierge.asm
    8 00000000         ; Auteur : V.MAHOUT
    9 00000000         ; Date :  12/11/2013
   10 00000000         ;*******************************************************
                       *******************
   11 00000000         
   12 00000000         ;***************IMPORT/EXPORT***************************
                       *******************
   13 00000000         
   14 00000000         ;*******************************************************
                       *******************
   15 00000000                 IMPORT           Run_Timer4
   16 00000000                 IMPORT           Stop_Timer4
   17 00000000                 IMPORT           Nbsecteurs
   18 00000000                 IMPORT           mire
   19 00000000                 IMPORT           DataSend
   20 00000000         
   21 00000000                 EXPORT           Timer_CC
   22 00000000                 EXPORT           Timer_UP
   23 00000000                 EXPORT           Timer_UP4
   24 00000000         
   25 00000000         ;***************CONSTANTES******************************
                       *******************
   26 00000000         
   27 00000000                 include          REG_UTILES.inc
    1 00000000         
    2 00000000         ;**************************************
    3 00000000         ;     Les adresess utiles  
    4 00000000         ;***************************************
    5 00000000         
    6 00000000         
    7 00000000         ;**************************************
    8 00000000         ;     Affectation des bits GPIO  
    9 00000000         ;***************************************
   10 00000000         ; GSLCK..... PA0 
   11 00000000         ; DSPRG..... PA1 
   12 00000000         ; BLANK..... PA2 
   13 00000000         ; XLAT...... PA3
   14 00000000         ; VPRG...... PA4
   15 00000000         ; SCLK...... PA5
   16 00000000         ; SIN1...... PA7
   17 00000000         ;Capteur.....PA8
   18 00000000         
   19 00000000         ;LED.........PB10
   20 00000000         ;****************************************/
   21 00000000         
   22 00000000         
   23 00000000         
   24 00000000 40010800 
                       GPIOBASEA
                               EQU              0X40010800



ARM Macro Assembler    Page 2 


   25 00000000 40010C00 
                       GPIOBASEB
                               EQU              0X40010C00
   26 00000000         
   27 00000000 00000008 
                       OffsetInput
                               EQU              0x08
   28 00000000 0000000C 
                       OffsetOutput
                               EQU              0x0C
   29 00000000 00000010 
                       OffsetSet
                               EQU              0x10
   30 00000000 00000014 
                       OffsetReset
                               EQU              0x14
   31 00000000         
   32 00000000         
   33 00000000 00000080 
                       MaskSerial_In1
                               equ              0x80
   34 00000000 00000080 
                       MaskSerial_Dots
                               equ              0x80
   35 00000000 00000010 
                       MaskVprg
                               equ              0x10
   36 00000000 00000008 
                       MaskXlat
                               equ              0x08
   37 00000000 00000004 
                       MaskBlank
                               equ              0x04
   38 00000000 00000020 
                       MaskSclk
                               equ              0x20
   39 00000000 00000002 
                       MaskDsprg
                               equ              0x02
   40 00000000 00000001 
                       MaskGsclk
                               equ              0x01
   41 00000000         
   42 00000000         
   43 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08
   44 00000000 40012C10 
                       TIM1_SR EQU              0x40012c10
   45 00000000 40012C24 
                       TIM1_CNT
                               EQU              0x40012c24
   46 00000000 4000082C 
                       TIM4_ARR
                               EQU              0x4000082C
   47 00000000 40000810 
                       TIM4_SR EQU              0x40000810
   48 00000000         
   49 00000000                 END



ARM Macro Assembler    Page 3 


   28 00000000         
   29 00000000         ;*******************************************************
                       *******************
   30 00000000         
   31 00000000         
   32 00000000         ;***************VARIABLES*******************************
                       *******************
   33 00000000                 AREA             MesDonnees, data, readwrite
   34 00000000         ;*******************************************************
                       *******************
   35 00000000         
   36 00000000 00000000 
                       Capture DCD              0
   37 00000004 00000000 
                       Valcourante
                               DCD              0
   38 00000008 00000000 
                       PisteMire
                               DCD              0
   39 0000000C         
   40 0000000C         ;*******************************************************
                       *******************
   41 0000000C         
   42 0000000C         ;***************CODE************************************
                       *******************
   43 0000000C                 AREA             moncode, code, readonly
   44 00000000         ;*******************************************************
                       *******************
   45 00000000         
   46 00000000         
   47 00000000         ;#######################################################
                       #################
   48 00000000         ; Procédure: routines utilisées par la TVI
   49 00000000         ;#######################################################
                       #################
   50 00000000         ;
   51 00000000         ; Paramètre entrant  : LR, PC
   52 00000000         ; Paramètre sortant  : LR, PC
   53 00000000         ; Variables globales : Nbsecteurs, mire, DataSend
   54 00000000         ; Registres modifiés : Aucun, tous les registres utilisé
                       s sont sauvegardés dans la Pile Systéme 
   55 00000000         ;-------------------------------------------------------
                       -----------------
   56 00000000         
   57 00000000         Timer_CC
                               PROC
   58 00000000         
   59 00000000 B50E            PUSH             {R1-R3, LR}
   60 00000002 484D            LDR              R0, =Capture
   61 00000004 6801            LDR              R1, [R0]
   62 00000006 2903            CMP              R1, #3
   63 00000008 4A4C            LDR              R2, =PisteMire
   64 0000000A F04F 0300       MOV              R3, #0
   65 0000000E 6013            STR              R3, [R2]    ;On rédemarre la Pi
                                                            ste à 0 parce que s
                                                            i on est ici, dans 
                                                            Timer_CC, est dû à 
                                                            que la roue a fait 
                                                            une tourne complete



ARM Macro Assembler    Page 4 


                                                            
   66 00000010 D00E            BEQ              BonneVitesse ;Si R1 = 3, ça va 
                                                            dire que la roue a 
                                                            tourné 3 fois, c'es
                                                            t suffisant pour as
                                                            surer la vitesse ra
                                                            diale constante et 
                                                            faire un bon calcul
                                                             de TIM4_ARR
   67 00000012         
   68 00000012 F101 0101       ADD              R1, R1, #1
   69 00000016 6001            STR              R1, [R0]    ;Sinon, on augmente
                                                             1 à la valeur de C
                                                            apture
   70 00000018         
   71 00000018 4849            LDR              R0, =TIM1_CNT
   72 0000001A F04F 0100       MOV              R1, #0
   73 0000001E 6001            STR              R1, [R0]    ;On redémarre le co
                                                            mpteur de TIM1 à 0
   74 00000020         
   75 00000020 4848            LDR              R0, =TIM1_SR
   76 00000022 6801            LDR              R1, [R0]
   77 00000024 F021 0102       AND              R1, R1, #0xFFFFFFFD
   78 00000028 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption
   79 0000002A         
   80 0000002A E8BD 400E       POP              {R1-R3, LR}
   81 0000002E 4770            BX               LR          ;Fin de l'interrupt
                                                            ion
   82 00000030         
   83 00000030         BonneVitesse                         ;Partie de la proce
                                                            dure Timer_CC
   84 00000030         
   85 00000030 4843            LDR              R0, =TIM1_CNT
   86 00000032 6801            LDR              R1, [R0]    ;Cette valeur corre
                                                            sponde à la valeur 
                                                            de Tr (la roue tour
                                                            ne à une vitesse co
                                                            nstante)
   87 00000034 4A44            LDR              R2, =Nbsecteurs
   88 00000036 FBB1 F1F2       UDIV             R1, R1, R2  ;Maintenant on calc
                                                            ule la valeur de Re
                                                            load
   89 0000003A 4844            LDR              R0, =TIM4_ARR
   90 0000003C 6001            STR              R1, [R0]
   91 0000003E         
   92 0000003E 4841            LDR              R0, =TIM1_SR
   93 00000040 6801            LDR              R1, [R0]
   94 00000042 F021 0102       AND              R1, R1, #0xFFFFFFFD
   95 00000046 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption en eff
                                                            açant le bit de ran
                                                            g 1 trouvé dans TIM
                                                            1_SR
   96 00000048         
   97 00000048 483D            LDR              R0, =TIM1_CNT
   98 0000004A F04F 0100       MOV              R1, #0
   99 0000004E 6001            STR              R1, [R0]    ;On redémarre le co
                                                            mpteur de TIM1 à 0



ARM Macro Assembler    Page 5 


  100 00000050         
  101 00000050 F7FF FFFE       BL               Run_Timer4  ;Démarrage du Timer
                                                            4 pour commencer l'
                                                            affichage des secte
                                                            urs
  102 00000054         
  103 00000054 E8BD 400E       POP              {R1-R3, LR}
  104 00000058 4770            BX               LR
  105 0000005A         
  106 0000005A                 ENDP
  107 0000005A         
  108 0000005A         Timer_UP
                               PROC                         ;Ici, TIM1_CNT = 0x
                                                            FFFF
  109 0000005A         
  110 0000005A B502            PUSH             {R1, LR}
  111 0000005C         
  112 0000005C 4836            LDR              R0, =Capture
  113 0000005E F04F 0100       MOV              R1, #0
  114 00000062 6001            STR              R1, [R0]    ;On met à 0 la vale
                                                            ur de Capture
  115 00000064         
  116 00000064 F7FF FFFE       BL               Stop_Timer4
  117 00000068         
  118 00000068 4836            LDR              R0, =TIM1_SR
  119 0000006A 6801            LDR              R1, [R0]
  120 0000006C F021 0101       AND              R1, R1, #0xFFFFFFFE
  121 00000070 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption en eff
                                                            açant de bit de ran
                                                            g 0 trouvé dans TIM
                                                            1_SR
  122 00000072         
  123 00000072 E8BD 4002       POP              {R1, LR}
  124 00000076 4770            BX               LR
  125 00000078         
  126 00000078                 ENDP
  127 00000078         
  128 00000078         Timer_UP4
                               PROC
  129 00000078         
  130 00000078 B50F            PUSH             {R0-R3, LR}
  131 0000007A         
  132 0000007A BF00            NOP
  133 0000007C 482F            LDR              R0, =PisteMire ;On regarde dans
                                                             quelle piste se tr
                                                            ouve la roue
  134 0000007E 6802            LDR              R2, [R0]
  135 00000080         
  136 00000080 4933            LDR              R1, =mire
  137 00000082 F04F 0330       MOV              R3, #0x30   ;Pendant chaque tou
                                                            rne, l'information 
                                                            pour les 48 LED's e
                                                            st envoyé, ensuite,
                                                             pour changer de se
                                                            cteur, on doit saut
                                                            er un space de 48 o
                                                            ctets (ou 0x30)
  138 00000086 FB02 F303       MUL              R3, R2, R3  ;En plus, on doit s



ARM Macro Assembler    Page 6 


                                                            auter les 48 octets
                                                             multipliés par la 
                                                            piste où on se trou
                                                            ve
  139 0000008A EB01 0003       ADD              R0, R1, R3  ;Finalement, on ajo
                                                            ute cette valeur à 
                                                            l'adresse de mire
  140 0000008E F7FF FFFE       BL               DriverReg
  141 00000092         
  142 00000092 482A            LDR              R0, =PisteMire
  143 00000094 6802            LDR              R2, [R0]
  144 00000096 F102 0201       ADD              R2, R2, #1
  145 0000009A 6002            STR              R2, [R0]    ;On avance à la pis
                                                            te suivante
  146 0000009C         
  147 0000009C 482D            LDR              R0, =TIM4_SR
  148 0000009E 6801            LDR              R1, [R0]
  149 000000A0 F021 0101       AND              R1, R1, #0xFFFFFFFE
  150 000000A4 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption en eff
                                                            açant le bit de ran
                                                            g 0 trouvé dans TIM
                                                            4_SR
  151 000000A6         
  152 000000A6 E8BD 400F       POP              {LR, R0-R3}
  153 000000AA 4770            BX               LR
  154 000000AC         
  155 000000AC                 ENDP
  156 000000AC         
  157 000000AC         DriverReg
                               PROC
  158 000000AC         
  159 000000AC B53E            PUSH             {R1-R5, LR}
  160 000000AE         
  161 000000AE F04F 0100       MOV              R1, #0      ;NbLED
  162 000000B2 4B29            LDR              R3, =Valcourante
  163 000000B4 F7FF FFFE       BL               SetSCLK
  164 000000B8         
  165 000000B8         PourReg
  166 000000B8 2930            CMP              R1, #48
  167 000000BA D01A            BEQ              FinPourReg
  168 000000BC         
  169 000000BC         
  170 000000BC         FairePourReg
  171 000000BC 5C43            LDRB             R3,[R0,R1]
  172 000000BE EA4F 6303       LSL              R3, #24
  173 000000C2         
  174 000000C2 F04F 0200       MOV              R2, #0
  175 000000C6         
  176 000000C6         AutrePourReg
  177 000000C6 2A0C            CMP              R2, #12
  178 000000C8 D010            BEQ              FinAutrePourReg
  179 000000CA         
  180 000000CA F7FF FFFE       BL               ResetSCLK
  181 000000CE         
  182 000000CE F013 4400       ANDS             R4, R3, #0x80000000
  183 000000D2 D002            BEQ              SinonReg
  184 000000D4 F7FF FFFE       BL               SetSin
  185 000000D8 E001            B                FinSiReg



ARM Macro Assembler    Page 7 


  186 000000DA         
  187 000000DA         SinonReg
  188 000000DA F7FF FFFE       BL               ResetSin
  189 000000DE         
  190 000000DE         FinSiReg
  191 000000DE EA4F 0343       LSL              R3, #1      ; on positionne Val
                                                            Courante au bit sui
                                                            vant
  192 000000E2 F7FF FFFE       BL               SetSCLK
  193 000000E6         
  194 000000E6 F102 0201       ADD              R2, #1
  195 000000EA E7EC            B                AutrePourReg
  196 000000EC         
  197 000000EC         FinAutrePourReg
  198 000000EC F101 0101       ADD              R1, #1
  199 000000F0 E7E2            B                PourReg
  200 000000F2         
  201 000000F2         FinPourReg
  202 000000F2         
  203 000000F2         ; Les deux boucles sont terminées 
  204 000000F2         
  205 000000F2 F04F 0500       MOV              R5, #0      ;DataSend = 0 à cha
                                                            que envoi de donnée
                                                             
  206 000000F6 4919            LDR              R1, =DataSend
  207 000000F8 7029            STRB             R1, [R5]
  208 000000FA         
  209 000000FA E8BD 403E       POP              {R1-R5, LR}
  210 000000FE         
  211 000000FE 4770            BX               LR
  212 00000100         
  213 00000100                 ENDP
  214 00000100         ;#######################################################
                       #################
  215 00000100         ; Procédure de gestion des LEDs 
  216 00000100         ;#######################################################
                       #################
  217 00000100         
  218 00000100         SetSin  PROC
  219 00000100 B40C            PUSH             {R2,R3}
  220 00000102 4A17            LDR              R2, =GPIOBASEA+OffsetSet
  221 00000104 F04F 0380       MOV              R3, #(0x01<<7)
  222 00000108 8013            STRH             R3, [R2]
  223 0000010A BC0C            POP              {R2,R3}
  224 0000010C 4770            BX               LR
  225 0000010E                 ENDP
  226 0000010E         
  227 0000010E         ResetSin
                               PROC
  228 0000010E B40C            PUSH             {R2,R3}
  229 00000110 4A14            LDR              R2, =GPIOBASEA+OffsetReset
  230 00000112 F04F 0380       MOV              R3, #(0x01<<7)
  231 00000116 8013            STRH             R3, [R2]
  232 00000118 BC0C            POP              {R2,R3}
  233 0000011A 4770            BX               LR
  234 0000011C                 ENDP
  235 0000011C         
  236 0000011C         SetSCLK PROC
  237 0000011C B40C            PUSH             {R2,R3}



ARM Macro Assembler    Page 8 


  238 0000011E 4A10            LDR              R2, =GPIOBASEA+OffsetSet
  239 00000120 F04F 0320       MOV              R3, #(0x01<<5)
  240 00000124 8013            STRH             R3, [R2]
  241 00000126 BC0C            POP              {R2,R3}
  242 00000128 4770            BX               LR
  243 0000012A         
  244 0000012A                 ENDP
  245 0000012A         
  246 0000012A         ResetSCLK
                               PROC
  247 0000012A B40C            PUSH             {R2, R3}
  248 0000012C 4A0D            LDR              R2, =GPIOBASEA+OffsetReset
  249 0000012E F04F 0320       MOV              R3, #(0x01<<5)
  250 00000132 8013            STRH             R3, [R2]
  251 00000134 BC0C            POP              {R2, R3}
  252 00000136 4770            BX               LR
  253 00000138         
  254 00000138                 ENDP
  255 00000138         
  256 00000138         ;*******************************************************
                       *******************
  257 00000138                 END
              00000000 
              00000000 
              40012C24 
              40012C10 
              00000000 
              4000082C 
              00000000 
              40000810 
              00000000 
              00000000 
              40010810 
              40010814 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\fonctionetape.d -o.\objects\fonctionetape.o -I.\RTE\Devi
ce\STM32F103RB -I.\RTE\_Simul_ -IC:\Users\emarina\AppData\Local\Arm\Packs\ARM\C
MSIS\5.6.0\CMSIS\Core\Include -IC:\Users\emarina\AppData\Local\Arm\Packs\Keil\S
TM32F1xx_DFP\2.3.0\Device\Include --predefine="__EVAL SETA 1" --predefine="__MI
CROLIB SETA 1" --predefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ SETA
 1" --predefine="STM32F10X_MD SETA 1" --predefine="STM32F10X_MD SETA 1" --list=
.\listings\fonctionetape.lst FonctionEtape.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Capture 00000000

Symbol: Capture
   Definitions
      At line 36 in file FonctionEtape.asm
   Uses
      At line 60 in file FonctionEtape.asm
      At line 112 in file FonctionEtape.asm

MesDonnees 00000000

Symbol: MesDonnees
   Definitions
      At line 33 in file FonctionEtape.asm
   Uses
      None
Comment: MesDonnees unused
PisteMire 00000008

Symbol: PisteMire
   Definitions
      At line 38 in file FonctionEtape.asm
   Uses
      At line 63 in file FonctionEtape.asm
      At line 133 in file FonctionEtape.asm
      At line 142 in file FonctionEtape.asm

Valcourante 00000004

Symbol: Valcourante
   Definitions
      At line 37 in file FonctionEtape.asm
   Uses
      At line 162 in file FonctionEtape.asm
Comment: Valcourante used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AutrePourReg 000000C6

Symbol: AutrePourReg
   Definitions
      At line 176 in file FonctionEtape.asm
   Uses
      At line 195 in file FonctionEtape.asm
Comment: AutrePourReg used once
BonneVitesse 00000030

Symbol: BonneVitesse
   Definitions
      At line 83 in file FonctionEtape.asm
   Uses
      At line 66 in file FonctionEtape.asm
Comment: BonneVitesse used once
DriverReg 000000AC

Symbol: DriverReg
   Definitions
      At line 157 in file FonctionEtape.asm
   Uses
      At line 140 in file FonctionEtape.asm
Comment: DriverReg used once
FairePourReg 000000BC

Symbol: FairePourReg
   Definitions
      At line 170 in file FonctionEtape.asm
   Uses
      None
Comment: FairePourReg unused
FinAutrePourReg 000000EC

Symbol: FinAutrePourReg
   Definitions
      At line 197 in file FonctionEtape.asm
   Uses
      At line 178 in file FonctionEtape.asm
Comment: FinAutrePourReg used once
FinPourReg 000000F2

Symbol: FinPourReg
   Definitions
      At line 201 in file FonctionEtape.asm
   Uses
      At line 167 in file FonctionEtape.asm
Comment: FinPourReg used once
FinSiReg 000000DE

Symbol: FinSiReg
   Definitions
      At line 190 in file FonctionEtape.asm
   Uses
      At line 185 in file FonctionEtape.asm
Comment: FinSiReg used once
PourReg 000000B8

Symbol: PourReg



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 165 in file FonctionEtape.asm
   Uses
      At line 199 in file FonctionEtape.asm
Comment: PourReg used once
ResetSCLK 0000012A

Symbol: ResetSCLK
   Definitions
      At line 246 in file FonctionEtape.asm
   Uses
      At line 180 in file FonctionEtape.asm
Comment: ResetSCLK used once
ResetSin 0000010E

Symbol: ResetSin
   Definitions
      At line 227 in file FonctionEtape.asm
   Uses
      At line 188 in file FonctionEtape.asm
Comment: ResetSin used once
SetSCLK 0000011C

Symbol: SetSCLK
   Definitions
      At line 236 in file FonctionEtape.asm
   Uses
      At line 163 in file FonctionEtape.asm
      At line 192 in file FonctionEtape.asm

SetSin 00000100

Symbol: SetSin
   Definitions
      At line 218 in file FonctionEtape.asm
   Uses
      At line 184 in file FonctionEtape.asm
Comment: SetSin used once
SinonReg 000000DA

Symbol: SinonReg
   Definitions
      At line 187 in file FonctionEtape.asm
   Uses
      At line 183 in file FonctionEtape.asm
Comment: SinonReg used once
Timer_CC 00000000

Symbol: Timer_CC
   Definitions
      At line 57 in file FonctionEtape.asm
   Uses
      At line 21 in file FonctionEtape.asm
Comment: Timer_CC used once
Timer_UP 0000005A

Symbol: Timer_UP
   Definitions
      At line 108 in file FonctionEtape.asm



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 22 in file FonctionEtape.asm
Comment: Timer_UP used once
Timer_UP4 00000078

Symbol: Timer_UP4
   Definitions
      At line 128 in file FonctionEtape.asm
   Uses
      At line 23 in file FonctionEtape.asm
Comment: Timer_UP4 used once
moncode 00000000

Symbol: moncode
   Definitions
      At line 43 in file FonctionEtape.asm
   Uses
      None
Comment: moncode unused
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOBASEA 40010800

Symbol: GPIOBASEA
   Definitions
      At line 24 in file REG_UTILES.inc
   Uses
      At line 220 in file FonctionEtape.asm
      At line 229 in file FonctionEtape.asm
      At line 238 in file FonctionEtape.asm
      At line 248 in file FonctionEtape.asm

GPIOBASEB 40010C00

Symbol: GPIOBASEB
   Definitions
      At line 25 in file REG_UTILES.inc
   Uses
      None
Comment: GPIOBASEB unused
MaskBlank 00000004

Symbol: MaskBlank
   Definitions
      At line 37 in file REG_UTILES.inc
   Uses
      None
Comment: MaskBlank unused
MaskDsprg 00000002

Symbol: MaskDsprg
   Definitions
      At line 39 in file REG_UTILES.inc
   Uses
      None
Comment: MaskDsprg unused
MaskGsclk 00000001

Symbol: MaskGsclk
   Definitions
      At line 40 in file REG_UTILES.inc
   Uses
      None
Comment: MaskGsclk unused
MaskSclk 00000020

Symbol: MaskSclk
   Definitions
      At line 38 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSclk unused
MaskSerial_Dots 00000080

Symbol: MaskSerial_Dots
   Definitions
      At line 34 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_Dots unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

MaskSerial_In1 00000080

Symbol: MaskSerial_In1
   Definitions
      At line 33 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_In1 unused
MaskVprg 00000010

Symbol: MaskVprg
   Definitions
      At line 35 in file REG_UTILES.inc
   Uses
      None
Comment: MaskVprg unused
MaskXlat 00000008

Symbol: MaskXlat
   Definitions
      At line 36 in file REG_UTILES.inc
   Uses
      None
Comment: MaskXlat unused
OffsetInput 00000008

Symbol: OffsetInput
   Definitions
      At line 27 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetInput unused
OffsetOutput 0000000C

Symbol: OffsetOutput
   Definitions
      At line 28 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetOutput unused
OffsetReset 00000014

Symbol: OffsetReset
   Definitions
      At line 30 in file REG_UTILES.inc
   Uses
      At line 229 in file FonctionEtape.asm
      At line 248 in file FonctionEtape.asm

OffsetSet 00000010

Symbol: OffsetSet
   Definitions
      At line 29 in file REG_UTILES.inc
   Uses
      At line 220 in file FonctionEtape.asm
      At line 238 in file FonctionEtape.asm

SCB_VTOR E000ED08



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: SCB_VTOR
   Definitions
      At line 43 in file REG_UTILES.inc
   Uses
      None
Comment: SCB_VTOR unused
TIM1_CNT 40012C24

Symbol: TIM1_CNT
   Definitions
      At line 45 in file REG_UTILES.inc
   Uses
      At line 71 in file FonctionEtape.asm
      At line 85 in file FonctionEtape.asm
      At line 97 in file FonctionEtape.asm

TIM1_SR 40012C10

Symbol: TIM1_SR
   Definitions
      At line 44 in file REG_UTILES.inc
   Uses
      At line 75 in file FonctionEtape.asm
      At line 92 in file FonctionEtape.asm
      At line 118 in file FonctionEtape.asm

TIM4_ARR 4000082C

Symbol: TIM4_ARR
   Definitions
      At line 46 in file REG_UTILES.inc
   Uses
      At line 89 in file FonctionEtape.asm
Comment: TIM4_ARR used once
TIM4_SR 40000810

Symbol: TIM4_SR
   Definitions
      At line 47 in file REG_UTILES.inc
   Uses
      At line 147 in file FonctionEtape.asm
Comment: TIM4_SR used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DataSend 00000000

Symbol: DataSend
   Definitions
      At line 19 in file FonctionEtape.asm
   Uses
      At line 206 in file FonctionEtape.asm
Comment: DataSend used once
Nbsecteurs 00000000

Symbol: Nbsecteurs
   Definitions
      At line 17 in file FonctionEtape.asm
   Uses
      At line 87 in file FonctionEtape.asm
Comment: Nbsecteurs used once
Run_Timer4 00000000

Symbol: Run_Timer4
   Definitions
      At line 15 in file FonctionEtape.asm
   Uses
      At line 101 in file FonctionEtape.asm
Comment: Run_Timer4 used once
Stop_Timer4 00000000

Symbol: Stop_Timer4
   Definitions
      At line 16 in file FonctionEtape.asm
   Uses
      At line 116 in file FonctionEtape.asm
Comment: Stop_Timer4 used once
mire 00000000

Symbol: mire
   Definitions
      At line 18 in file FonctionEtape.asm
   Uses
      At line 136 in file FonctionEtape.asm
Comment: mire used once
5 symbols
382 symbols in table
