


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ********************
    2 00000000                 THUMB
    3 00000000                 REQUIRE8
    4 00000000                 PRESERVE8
    5 00000000         
    6 00000000         ;*******************************************************
                       *******************
    7 00000000         ;  Fichier Vierge.asm
    8 00000000         ; Auteur : V.MAHOUT
    9 00000000         ; Date :  12/11/2013
   10 00000000         ;*******************************************************
                       *******************
   11 00000000         
   12 00000000         ;***************IMPORT/EXPORT***************************
                       *******************
   13 00000000         
   14 00000000         ;*******************************************************
                       *******************
   15 00000000                 IMPORT           Run_Timer4
   16 00000000                 IMPORT           Stop_Timer4
   17 00000000                 IMPORT           Nbsecteurs
   18 00000000                 IMPORT           mire
   19 00000000                 IMPORT           DataSend
   20 00000000         
   21 00000000                 EXPORT           Timer_CC
   22 00000000                 EXPORT           Timer_UP
   23 00000000                 EXPORT           Timer_UP4
   24 00000000         
   25 00000000         ;***************CONSTANTES******************************
                       *******************
   26 00000000         
   27 00000000                 include          REG_UTILES.inc
    1 00000000         
    2 00000000         ;**************************************
    3 00000000         ;     Les adresess utiles  
    4 00000000         ;***************************************
    5 00000000         
    6 00000000         
    7 00000000         ;**************************************
    8 00000000         ;     Affectation des bits GPIO  
    9 00000000         ;***************************************
   10 00000000         ; GSLCK..... PA0 
   11 00000000         ; DSPRG..... PA1 
   12 00000000         ; BLANK..... PA2 
   13 00000000         ; XLAT...... PA3
   14 00000000         ; VPRG...... PA4
   15 00000000         ; SCLK...... PA5
   16 00000000         ; SIN1...... PA7
   17 00000000         ;Capteur.....PA8
   18 00000000         
   19 00000000         ;LED.........PB10
   20 00000000         ;****************************************/
   21 00000000         
   22 00000000         
   23 00000000         
   24 00000000 40010800 
                       GPIOBASEA
                               EQU              0X40010800



ARM Macro Assembler    Page 2 


   25 00000000 40010C00 
                       GPIOBASEB
                               EQU              0X40010C00
   26 00000000         
   27 00000000 00000008 
                       OffsetInput
                               EQU              0x08
   28 00000000 0000000C 
                       OffsetOutput
                               EQU              0x0C
   29 00000000 00000010 
                       OffsetSet
                               EQU              0x10
   30 00000000 00000014 
                       OffsetReset
                               EQU              0x14
   31 00000000         
   32 00000000         
   33 00000000 00000080 
                       MaskSerial_In1
                               equ              0x80
   34 00000000 00000080 
                       MaskSerial_Dots
                               equ              0x80
   35 00000000 00000010 
                       MaskVprg
                               equ              0x10
   36 00000000 00000008 
                       MaskXlat
                               equ              0x08
   37 00000000 00000004 
                       MaskBlank
                               equ              0x04
   38 00000000 00000020 
                       MaskSclk
                               equ              0x20
   39 00000000 00000002 
                       MaskDsprg
                               equ              0x02
   40 00000000 00000001 
                       MaskGsclk
                               equ              0x01
   41 00000000         
   42 00000000         
   43 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08
   44 00000000 40012C10 
                       TIM1_SR EQU              0x40012c10
   45 00000000 40012C24 
                       TIM1_CNT
                               EQU              0x40012c24
   46 00000000 4000082C 
                       TIM4_ARR
                               EQU              0x4000082C
   47 00000000 40000810 
                       TIM4_SR EQU              0x40000810
   48 00000000         
   49 00000000                 END



ARM Macro Assembler    Page 3 


   28 00000000         
   29 00000000         ;*******************************************************
                       *******************
   30 00000000         
   31 00000000         
   32 00000000         ;***************VARIABLES*******************************
                       *******************
   33 00000000                 AREA             MesDonnees, data, readwrite
   34 00000000         ;*******************************************************
                       *******************
   35 00000000         
   36 00000000 00000000 
                       Capture DCD              0
   37 00000004 00000000 
                       Valcourante
                               DCD              0
   38 00000008 00000000 
                       PisteMire
                               DCD              0
   39 0000000C         
   40 0000000C         ;*******************************************************
                       *******************
   41 0000000C         
   42 0000000C         
   43 0000000C         
   44 0000000C         ;***************CODE************************************
                       *******************
   45 0000000C                 AREA             moncode, code, readonly
   46 00000000         ;*******************************************************
                       *******************
   47 00000000         
   48 00000000         
   49 00000000         ;#######################################################
                       #################
   50 00000000         ; Procédure ????
   51 00000000         ;#######################################################
                       #################
   52 00000000         ;
   53 00000000         ; Paramètre entrant  : ???
   54 00000000         ; Paramètre sortant  : ???
   55 00000000         ; Variables globales : ???
   56 00000000         ; Registres modifiés : ???
   57 00000000         ;-------------------------------------------------------
                       -----------------
   58 00000000         
   59 00000000         Timer_CC
                               PROC
   60 00000000         
   61 00000000 B506            PUSH             {R1, R2, LR}
   62 00000002 484B            LDR              R0, =Capture
   63 00000004 6801            LDR              R1, [R0]
   64 00000006 2903            CMP              R1, #3
   65 00000008 4A4A            LDR              R2, =PisteMire
   66 0000000A F04F 0300       MOV              R3, #0
   67 0000000E 6013            STR              R3, [R2]    ;On rédemarre la Pi
                                                            ste à 0 parce que s
                                                            i on est ici, dans 
                                                            Timer_CC, est dû à 
                                                            que la roue a fait 



ARM Macro Assembler    Page 4 


                                                            une tourne complete
                                                            
   68 00000010 D00E            BEQ              BonneVitesse ;Si R1 = 3, ça va 
                                                            dire que la roue a 
                                                            tourné 3 fois, c'es
                                                            t suffisant pour as
                                                            surer la vitesse ra
                                                            diale constante et 
                                                            faire un bon calcul
                                                             de TIM4_ARR
   69 00000012         
   70 00000012 F101 0101       ADD              R1, R1, #1
   71 00000016 6001            STR              R1, [R0]    ;Sinon, on augmente
                                                             1 à la valeur de C
                                                            apture
   72 00000018         
   73 00000018 4847            LDR              R0, =TIM1_CNT
   74 0000001A F04F 0100       MOV              R1, #0
   75 0000001E 6001            STR              R1, [R0]    ;On redémarre le co
                                                            mpteur de TIM1 à 0
   76 00000020         
   77 00000020 4846            LDR              R0, =TIM1_SR
   78 00000022 6801            LDR              R1, [R0]
   79 00000024 F021 0102       AND              R1, R1, #0xFFFFFFFD
   80 00000028 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption
   81 0000002A         
   82 0000002A E8BD 4006       POP              {R1, R2, LR}
   83 0000002E 4770            BX               LR          ;Fin de l'interrupt
                                                            ion
   84 00000030         
   85 00000030         BonneVitesse                         ;Partie de la proce
                                                            dure Timer_CC
   86 00000030         
   87 00000030 4841            LDR              R0, =TIM1_CNT
   88 00000032 6801            LDR              R1, [R0]    ;Cette valeur corre
                                                            sponde à la valeur 
                                                            de Tr (la roue tour
                                                            ne à une vitesse co
                                                            nstante)
   89 00000034 4A42            LDR              R2, =Nbsecteurs
   90 00000036 FBB1 F1F2       UDIV             R1, R1, R2  ;Maintenant on calc
                                                            ule la valeur de Re
                                                            load
   91 0000003A 4842            LDR              R0, =TIM4_ARR
   92 0000003C 6001            STR              R1, [R0]
   93 0000003E         
   94 0000003E 483F            LDR              R0, =TIM1_SR
   95 00000040 6801            LDR              R1, [R0]
   96 00000042 F021 0102       AND              R1, R1, #0xFFFFFFFD
   97 00000046 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption
   98 00000048         
   99 00000048 483B            LDR              R0, =TIM1_CNT
  100 0000004A F04F 0100       MOV              R1, #0
  101 0000004E 6001            STR              R1, [R0]    ;On redémarre le co
                                                            mpteur de TIM1 à 0
  102 00000050         
  103 00000050 F7FF FFFE       BL               Run_Timer4  ;Démarrage du Timer



ARM Macro Assembler    Page 5 


                                                            4 pour commencer l'
                                                            affichage des secte
                                                            urs
  104 00000054         
  105 00000054 E8BD 4006       POP              {R1, R2, LR}
  106 00000058 4770            BX               LR
  107 0000005A         
  108 0000005A                 ENDP
  109 0000005A         
  110 0000005A         Timer_UP
                               PROC                         ;Ici, TIM1_CNT = 0x
                                                            FFFF
  111 0000005A         
  112 0000005A B502            PUSH             {R1, LR}
  113 0000005C F7FF FFFE       BL               Stop_Timer4
  114 00000060         
  115 00000060 4836            LDR              R0, =TIM1_SR
  116 00000062 6801            LDR              R1, [R0]
  117 00000064 F021 0102       AND              R1, R1, #0xFFFFFFFD
  118 00000068 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption
  119 0000006A         
  120 0000006A E8BD 4002       POP              {R1, LR}
  121 0000006E 4770            BX               LR
  122 00000070         
  123 00000070                 ENDP
  124 00000070         
  125 00000070         Timer_UP4
                               PROC
  126 00000070         
  127 00000070 B50F            PUSH             {R0-R3, LR}
  128 00000072         
  129 00000072 BF00            NOP
  130 00000074 482F            LDR              R0, =PisteMire ;On regarde dans
                                                             quelle piste se tr
                                                            ouve la roue
  131 00000076 6802            LDR              R2, [R0]
  132 00000078         
  133 00000078 4933            LDR              R1, =mire
  134 0000007A F04F 0330       MOV              R3, #0x30   ;Pendant chaque tou
                                                            rne, l'information 
                                                            pour les 48 LED's e
                                                            st envoyé, ensuite,
                                                             pour changer de se
                                                            cteur, on doit saut
                                                            er un space de 48 o
                                                            ctets (ou 0x30)
  135 0000007E FB02 F303       MUL              R3, R2, R3  ;En plus, on doit s
                                                            auter les 48 octets
                                                             multipliés par la 
                                                            piste où on se trou
                                                            ve
  136 00000082 EB01 0003       ADD              R0, R1, R3  ;Finalement, on ajo
                                                            ute cette valeur à 
                                                            l'adresse de mire
  137 00000086 F7FF FFFE       BL               DriverReg
  138 0000008A         
  139 0000008A 482A            LDR              R0, =PisteMire
  140 0000008C 6802            LDR              R2, [R0]



ARM Macro Assembler    Page 6 


  141 0000008E F102 0201       ADD              R2, R2, #1
  142 00000092 6002            STR              R2, [R0]    ;On avance à la pis
                                                            te suivante
  143 00000094         
  144 00000094 482D            LDR              R0, =TIM4_SR
  145 00000096 6801            LDR              R1, [R0]
  146 00000098 F021 0101       AND              R1, R1, #0xFFFFFFFE
  147 0000009C 6001            STR              R1, [R0]    ;Acquittement de l'
                                                            interruption
  148 0000009E         
  149 0000009E E8BD 400F       POP              {LR, R0-R3}
  150 000000A2 4770            BX               LR
  151 000000A4         
  152 000000A4                 ENDP
  153 000000A4         
  154 000000A4         DriverReg
                               PROC
  155 000000A4         
  156 000000A4 B53E            PUSH             {R1-R5, LR}
  157 000000A6         
  158 000000A6 F04F 0100       MOV              R1, #0      ;NbLED
  159 000000AA 4B29            LDR              R3, =Valcourante
  160 000000AC F7FF FFFE       BL               SetSCLK
  161 000000B0         
  162 000000B0         PourReg
  163 000000B0 2930            CMP              R1, #48
  164 000000B2 D01A            BEQ              FinPourReg
  165 000000B4         
  166 000000B4         
  167 000000B4         FairePourReg
  168 000000B4 5C43            LDRB             R3,[R0,R1]
  169 000000B6 EA4F 6303       LSL              R3, #24
  170 000000BA         
  171 000000BA F04F 0200       MOV              R2, #0
  172 000000BE         
  173 000000BE         AutrePourReg
  174 000000BE 2A0C            CMP              R2, #12
  175 000000C0 D010            BEQ              FinAutrePourReg
  176 000000C2         
  177 000000C2 F7FF FFFE       BL               ResetSCLK
  178 000000C6         
  179 000000C6 F013 4400       ANDS             R4, R3, #0x80000000
  180 000000CA D002            BEQ              SinonReg
  181 000000CC F7FF FFFE       BL               SetSin
  182 000000D0 E001            B                FinSiReg
  183 000000D2         
  184 000000D2         SinonReg
  185 000000D2 F7FF FFFE       BL               ResetSin
  186 000000D6         
  187 000000D6         FinSiReg
  188 000000D6 EA4F 0343       LSL              R3, #1      ; on positionne Val
                                                            Courante au bit sui
                                                            vant
  189 000000DA F7FF FFFE       BL               SetSCLK
  190 000000DE         
  191 000000DE F102 0201       ADD              R2, #1
  192 000000E2 E7EC            B                AutrePourReg
  193 000000E4         
  194 000000E4         FinAutrePourReg



ARM Macro Assembler    Page 7 


  195 000000E4 F101 0101       ADD              R1, #1
  196 000000E8 E7E2            B                PourReg
  197 000000EA         
  198 000000EA         FinPourReg
  199 000000EA         
  200 000000EA         ; Les deux boucles sont terminées 
  201 000000EA         
  202 000000EA F04F 0500       MOV              R5, #0      ;DataSend = 0 à cha
                                                            que envoi de donnée
                                                             
  203 000000EE 4919            LDR              R1, =DataSend
  204 000000F0 7029            STRB             R1, [R5]
  205 000000F2         
  206 000000F2 E8BD 403E       POP              {R1-R5, LR}
  207 000000F6         
  208 000000F6 4770            BX               LR
  209 000000F8         
  210 000000F8                 ENDP
  211 000000F8         ;#######################################################
                       #################
  212 000000F8         ; Procédure de gestion des LEDs 
  213 000000F8         ;#######################################################
                       #################
  214 000000F8         
  215 000000F8         SetSin  PROC
  216 000000F8 B40C            PUSH             {R2,R3}
  217 000000FA 4A17            LDR              R2, =GPIOBASEA+OffsetSet
  218 000000FC F04F 0380       MOV              R3, #(0x01<<7)
  219 00000100 8013            STRH             R3, [R2]
  220 00000102 BC0C            POP              {R2,R3}
  221 00000104 4770            BX               LR
  222 00000106                 ENDP
  223 00000106         
  224 00000106         ResetSin
                               PROC
  225 00000106 B40C            PUSH             {R2,R3}
  226 00000108 4A14            LDR              R2, =GPIOBASEA+OffsetReset
  227 0000010A F04F 0380       MOV              R3, #(0x01<<7)
  228 0000010E 8013            STRH             R3, [R2]
  229 00000110 BC0C            POP              {R2,R3}
  230 00000112 4770            BX               LR
  231 00000114                 ENDP
  232 00000114         
  233 00000114         SetSCLK PROC
  234 00000114 B40C            PUSH             {R2,R3}
  235 00000116 4A10            LDR              R2, =GPIOBASEA+OffsetSet
  236 00000118 F04F 0320       MOV              R3, #(0x01<<5)
  237 0000011C 8013            STRH             R3, [R2]
  238 0000011E BC0C            POP              {R2,R3}
  239 00000120 4770            BX               LR
  240 00000122         
  241 00000122                 ENDP
  242 00000122         
  243 00000122         ResetSCLK
                               PROC
  244 00000122 B40C            PUSH             {R2, R3}
  245 00000124 4A0D            LDR              R2, =GPIOBASEA+OffsetReset
  246 00000126 F04F 0320       MOV              R3, #(0x01<<5)
  247 0000012A 8013            STRH             R3, [R2]



ARM Macro Assembler    Page 8 


  248 0000012C BC0C            POP              {R2, R3}
  249 0000012E 4770            BX               LR
  250 00000130         
  251 00000130                 ENDP
  252 00000130         
  253 00000130         ;*******************************************************
                       *******************
  254 00000130                 END
              00000000 
              00000000 
              40012C24 
              40012C10 
              00000000 
              4000082C 
              00000000 
              40000810 
              00000000 
              00000000 
              40010810 
              40010814 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\fonctionetape.d -o.\objects\fonctionetape.o -I.\RTE\Devi
ce\STM32F103RB -I.\RTE\_Simul_ -IC:\Users\emarina\AppData\Local\Arm\Packs\ARM\C
MSIS\5.6.0\CMSIS\Core\Include -IC:\Users\emarina\AppData\Local\Arm\Packs\Keil\S
TM32F1xx_DFP\2.3.0\Device\Include --predefine="__EVAL SETA 1" --predefine="__MI
CROLIB SETA 1" --predefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ SETA
 1" --predefine="STM32F10X_MD SETA 1" --predefine="STM32F10X_MD SETA 1" --list=
.\listings\fonctionetape.lst FonctionEtape.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Capture 00000000

Symbol: Capture
   Definitions
      At line 36 in file FonctionEtape.asm
   Uses
      At line 62 in file FonctionEtape.asm
Comment: Capture used once
MesDonnees 00000000

Symbol: MesDonnees
   Definitions
      At line 33 in file FonctionEtape.asm
   Uses
      None
Comment: MesDonnees unused
PisteMire 00000008

Symbol: PisteMire
   Definitions
      At line 38 in file FonctionEtape.asm
   Uses
      At line 65 in file FonctionEtape.asm
      At line 130 in file FonctionEtape.asm
      At line 139 in file FonctionEtape.asm

Valcourante 00000004

Symbol: Valcourante
   Definitions
      At line 37 in file FonctionEtape.asm
   Uses
      At line 159 in file FonctionEtape.asm
Comment: Valcourante used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AutrePourReg 000000BE

Symbol: AutrePourReg
   Definitions
      At line 173 in file FonctionEtape.asm
   Uses
      At line 192 in file FonctionEtape.asm
Comment: AutrePourReg used once
BonneVitesse 00000030

Symbol: BonneVitesse
   Definitions
      At line 85 in file FonctionEtape.asm
   Uses
      At line 68 in file FonctionEtape.asm
Comment: BonneVitesse used once
DriverReg 000000A4

Symbol: DriverReg
   Definitions
      At line 154 in file FonctionEtape.asm
   Uses
      At line 137 in file FonctionEtape.asm
Comment: DriverReg used once
FairePourReg 000000B4

Symbol: FairePourReg
   Definitions
      At line 167 in file FonctionEtape.asm
   Uses
      None
Comment: FairePourReg unused
FinAutrePourReg 000000E4

Symbol: FinAutrePourReg
   Definitions
      At line 194 in file FonctionEtape.asm
   Uses
      At line 175 in file FonctionEtape.asm
Comment: FinAutrePourReg used once
FinPourReg 000000EA

Symbol: FinPourReg
   Definitions
      At line 198 in file FonctionEtape.asm
   Uses
      At line 164 in file FonctionEtape.asm
Comment: FinPourReg used once
FinSiReg 000000D6

Symbol: FinSiReg
   Definitions
      At line 187 in file FonctionEtape.asm
   Uses
      At line 182 in file FonctionEtape.asm
Comment: FinSiReg used once
PourReg 000000B0

Symbol: PourReg



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 162 in file FonctionEtape.asm
   Uses
      At line 196 in file FonctionEtape.asm
Comment: PourReg used once
ResetSCLK 00000122

Symbol: ResetSCLK
   Definitions
      At line 243 in file FonctionEtape.asm
   Uses
      At line 177 in file FonctionEtape.asm
Comment: ResetSCLK used once
ResetSin 00000106

Symbol: ResetSin
   Definitions
      At line 224 in file FonctionEtape.asm
   Uses
      At line 185 in file FonctionEtape.asm
Comment: ResetSin used once
SetSCLK 00000114

Symbol: SetSCLK
   Definitions
      At line 233 in file FonctionEtape.asm
   Uses
      At line 160 in file FonctionEtape.asm
      At line 189 in file FonctionEtape.asm

SetSin 000000F8

Symbol: SetSin
   Definitions
      At line 215 in file FonctionEtape.asm
   Uses
      At line 181 in file FonctionEtape.asm
Comment: SetSin used once
SinonReg 000000D2

Symbol: SinonReg
   Definitions
      At line 184 in file FonctionEtape.asm
   Uses
      At line 180 in file FonctionEtape.asm
Comment: SinonReg used once
Timer_CC 00000000

Symbol: Timer_CC
   Definitions
      At line 59 in file FonctionEtape.asm
   Uses
      At line 21 in file FonctionEtape.asm
Comment: Timer_CC used once
Timer_UP 0000005A

Symbol: Timer_UP
   Definitions
      At line 110 in file FonctionEtape.asm



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 22 in file FonctionEtape.asm
Comment: Timer_UP used once
Timer_UP4 00000070

Symbol: Timer_UP4
   Definitions
      At line 125 in file FonctionEtape.asm
   Uses
      At line 23 in file FonctionEtape.asm
Comment: Timer_UP4 used once
moncode 00000000

Symbol: moncode
   Definitions
      At line 45 in file FonctionEtape.asm
   Uses
      None
Comment: moncode unused
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOBASEA 40010800

Symbol: GPIOBASEA
   Definitions
      At line 24 in file REG_UTILES.inc
   Uses
      At line 217 in file FonctionEtape.asm
      At line 226 in file FonctionEtape.asm
      At line 235 in file FonctionEtape.asm
      At line 245 in file FonctionEtape.asm

GPIOBASEB 40010C00

Symbol: GPIOBASEB
   Definitions
      At line 25 in file REG_UTILES.inc
   Uses
      None
Comment: GPIOBASEB unused
MaskBlank 00000004

Symbol: MaskBlank
   Definitions
      At line 37 in file REG_UTILES.inc
   Uses
      None
Comment: MaskBlank unused
MaskDsprg 00000002

Symbol: MaskDsprg
   Definitions
      At line 39 in file REG_UTILES.inc
   Uses
      None
Comment: MaskDsprg unused
MaskGsclk 00000001

Symbol: MaskGsclk
   Definitions
      At line 40 in file REG_UTILES.inc
   Uses
      None
Comment: MaskGsclk unused
MaskSclk 00000020

Symbol: MaskSclk
   Definitions
      At line 38 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSclk unused
MaskSerial_Dots 00000080

Symbol: MaskSerial_Dots
   Definitions
      At line 34 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_Dots unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

MaskSerial_In1 00000080

Symbol: MaskSerial_In1
   Definitions
      At line 33 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_In1 unused
MaskVprg 00000010

Symbol: MaskVprg
   Definitions
      At line 35 in file REG_UTILES.inc
   Uses
      None
Comment: MaskVprg unused
MaskXlat 00000008

Symbol: MaskXlat
   Definitions
      At line 36 in file REG_UTILES.inc
   Uses
      None
Comment: MaskXlat unused
OffsetInput 00000008

Symbol: OffsetInput
   Definitions
      At line 27 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetInput unused
OffsetOutput 0000000C

Symbol: OffsetOutput
   Definitions
      At line 28 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetOutput unused
OffsetReset 00000014

Symbol: OffsetReset
   Definitions
      At line 30 in file REG_UTILES.inc
   Uses
      At line 226 in file FonctionEtape.asm
      At line 245 in file FonctionEtape.asm

OffsetSet 00000010

Symbol: OffsetSet
   Definitions
      At line 29 in file REG_UTILES.inc
   Uses
      At line 217 in file FonctionEtape.asm
      At line 235 in file FonctionEtape.asm

SCB_VTOR E000ED08



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: SCB_VTOR
   Definitions
      At line 43 in file REG_UTILES.inc
   Uses
      None
Comment: SCB_VTOR unused
TIM1_CNT 40012C24

Symbol: TIM1_CNT
   Definitions
      At line 45 in file REG_UTILES.inc
   Uses
      At line 73 in file FonctionEtape.asm
      At line 87 in file FonctionEtape.asm
      At line 99 in file FonctionEtape.asm

TIM1_SR 40012C10

Symbol: TIM1_SR
   Definitions
      At line 44 in file REG_UTILES.inc
   Uses
      At line 77 in file FonctionEtape.asm
      At line 94 in file FonctionEtape.asm
      At line 115 in file FonctionEtape.asm

TIM4_ARR 4000082C

Symbol: TIM4_ARR
   Definitions
      At line 46 in file REG_UTILES.inc
   Uses
      At line 91 in file FonctionEtape.asm
Comment: TIM4_ARR used once
TIM4_SR 40000810

Symbol: TIM4_SR
   Definitions
      At line 47 in file REG_UTILES.inc
   Uses
      At line 144 in file FonctionEtape.asm
Comment: TIM4_SR used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DataSend 00000000

Symbol: DataSend
   Definitions
      At line 19 in file FonctionEtape.asm
   Uses
      At line 203 in file FonctionEtape.asm
Comment: DataSend used once
Nbsecteurs 00000000

Symbol: Nbsecteurs
   Definitions
      At line 17 in file FonctionEtape.asm
   Uses
      At line 89 in file FonctionEtape.asm
Comment: Nbsecteurs used once
Run_Timer4 00000000

Symbol: Run_Timer4
   Definitions
      At line 15 in file FonctionEtape.asm
   Uses
      At line 103 in file FonctionEtape.asm
Comment: Run_Timer4 used once
Stop_Timer4 00000000

Symbol: Stop_Timer4
   Definitions
      At line 16 in file FonctionEtape.asm
   Uses
      At line 113 in file FonctionEtape.asm
Comment: Stop_Timer4 used once
mire 00000000

Symbol: mire
   Definitions
      At line 18 in file FonctionEtape.asm
   Uses
      At line 133 in file FonctionEtape.asm
Comment: mire used once
5 symbols
382 symbols in table
